declare module "module_bag" {
    /**
     * 玩家道具信息基类
     */
    export class BagItemBase {
        /** 道具唯一Id */
        id: string;
        /** 配置Id */
        cfgId: number;
        /** 数量 */
        count: number;
    }
    type BagMap<T extends BagItemBase> = {
        [key: string]: T;
    };
    export class BagModuleDataBase<T extends BagItemBase> extends Subdata {
        items: BagMap<T>;
        get dataName(): string;
        protected initDefaultData(): void;
        /**
         * 通过道具唯一ID获取当前道具
         * @param itemId 唯一id
         * @returns 找到的道具
        */
        getItemByItemId(itemId: string): T;
        setItemByItemId(itemId: string, item: T): void;
        /**
         * 通过cfgId获取背包里满足的道具列表,可能返回多个
         * @param cfgId 配置ID
         */
        getItemsByConfig(cfgId: number): T[];
        getItemCount(cfgId: number): number;
        /**
         * 添加道具
         * @param items 要添加的道具列表，外部生成
         */
        addItems(items: T[]): void;
        /**
         * 删除道具
         * @param ids 要删除的id
         */
        deleteItems(ids: string[]): void;
        /**
         * 删除所有道具
         */
        deleteAllItems(): void;
        /**
         * 遍历道具
         * @param call 遍历函数
         */
        forEach(call: (data: T) => void): void;
    }
}

declare module "module_bag" {
    export class Queue<T> {
        private elemrnts;
        private _size;
        constructor(capacity?: number);
        push(o: T): boolean;
        pop(): T;
        size(): number;
        isempty(): boolean;
        clear(): void;
        show(num: number): T;
        showsize(): number | undefined;
        getAll(): T[];
    }
}

declare module "module_bag" {
    /**
     * 无限滚动列表_vae
     */
    export interface IItemRender {
        setData(data: any): void;
        get uiObject(): mw.Widget;
        get clickObj(): mw.StaleButton;
        setSelect(bool: boolean): void;
    }
    export class UIMultiScroller {
        private _index;
        private _dataCount;
        private _sBox;
        private _scrollRoot;
        private _movement;
        private _itemArr;
        private _unUsedQueue;
        private _maxPerLine;
        private _leftSpace;
        private _topSpace;
        private _cellWidth;
        private _cellHeight;
        private _spacingX;
        private _spacingY;
        private _viewLine;
        private _itemPrefab;
        private _dataArray;
        /**
        * 循环列表构造函数
        * @param sbox       ScrollBox对象ui的引用
        * @param sr         ScrollBox下的节点的引用
        * @param prefab     ScrollBoxItem预制体
        * @param maxPerLine 每行显示的数量
        * @param leftSpace  左边界间距
        * @param topSpace   上边界间距
        * @param cellWidth  ScrollBox下子节点的宽
        * @param cellHeight ScrollBox下子节点的高
        * @param viewCount  ScrollBox的默认加载行数
        * @param spacingX   ScrollBox的行间距X
        * @param spacingY   ScrollBox的行间距Y
        */
        constructor(sbox: mw.ScrollBox, sr: mw.Canvas, preafab: TypeName<IItemRender>, maxPerLine: number, leftSpace?: number, topSpace?: number, cellWidth?: number, cellHeight?: number, viewCount?: number, spacingX?: number, spacingY?: number);
        private mInitCallback;
        /**调用InitData第一次初始化时的回调 */
        get InitCallback(): mw.Action2<number, IItemRender>;
        private mItemCallback;
        /**每个Item刷新时的回调 */
        get ItemCallback(): mw.Action2<number, IItemRender>;
        setData(val: any[]): void;
        onValueChange(): void;
        /**
        * 根据索引号 获取当前item的位置
        * @param i   索引
        * @return 返回Pos
        */
        getPosition(i: number): mw.Vector2;
        onDestroy(): void;
        getItemCount(): number;
        private setItemIndex;
        private createItem;
        /**
        * 获取最上位置的索引
         * @return 返回Pos
        */
        private getPosIndex;
        private updateTotalWidth;
        private resetSBoxPos;
        reset2BoxTop(): void;
    }
}

declare module "module_bag" {
    export abstract class BagModuleBaseC<S extends BagModuleBaseS<any, T>, T extends BagItemBase> extends mwext.ModuleC<S, BagModuleDataBase<T>> {
        onAwake(): void;
        onStart(): void;
        getItemCnt(cfgId: number): number;
        getItemById(id: string): T;
        getItemsByCfg(cfgId: number): T[];
        abstract getItemIdsByType(type: number): string[];
        abstract isSameType(items: T[], type: number): boolean;
        net_ResAddItem2Bag(items: T[]): void;
        net_ResItemChange(item: T): void;
        net_ResItemsDelete(ids: string[]): void;
    }
    export class BagModuleBaseS<C extends BagModuleBaseC<any, T>, T extends BagItemBase> extends mwext.ModuleS<C, BagModuleDataBase<T>> {
        addItemToBag(player: mw.Player, items: T[]): void;
        net_ReqDeleteItems(reqs: string[], player?: mw.Player): boolean;
        ntfItemChange(player: mw.Player, item: T): void;
        ntfItemDelete(player: mw.Player, itemIds: string[]): void;
    }
    export class BagUICfg {
        scrollBox: mw.ScrollBox;
        scrollContent: mw.Canvas;
        renderItemSize: mw.Vector2;
        horAndVerSpace: mw.Vector2;
    }
    export abstract class BagUIBase<T extends BagItemBase, U extends mw.UIScript> extends mwext.BasePanel<U> {
        private moduleCls;
        private renderCls;
        private dataHelper;
        private mScroll;
        private curDataIds;
        private firstBtn;
        private tabMap;
        private renderMap;
        private curType;
        private curItemId;
        constructor(viewClass: TypeName<U>, moduleCls: TypeName<BagModuleBaseC<any, T>>, renderCls: TypeName<IItemRender>);
        protected onStart(): void;
        private onInitItem;
        private onRefeshItem;
        protected showItems(itemIds: string[]): void;
        protected addTabs(btn: mw.StaleButton, type: number, isFirst: boolean): void;
        private showItemsByTypes;
        protected onShow(...params: any[]): void;
        protected showItemDetal(item: T): void;
        protected getSelectData(): T;
        protected abstract initUICfg(cfg: BagUICfg): void;
        protected abstract onShowItemDetal(item: T): void;
        protected abstract onTabBtnStateChangeCallBack(btn: mw.StaleButton, isSelect: boolean): any;
    }
}
